# LiterAlura - Catálogo de Livros

Bem-vindo ao LiterAlura, seu catálogo de livros interativo! Este projeto desafiador foi desenvolvido para explorar o mundo do desenvolvimento Java, focando em integração com APIs, manipulação de JSON, persistência de dados em banco de dados e interação via console.

## Objetivo

O objetivo principal deste projeto é construir um sistema que permite aos usuários buscar, listar e visualizar informações sobre livros e autores. As funcionalidades principais incluem o consumo de uma API de livros para obter dados atualizados, armazenamento desses dados em um banco de dados local e interação com os usuários através de um menu interativo no console.

## Passos para Completar o Desafio

1. **Configuração do Ambiente Java**
   - Instalação do JDK e configuração da variável de ambiente `JAVA_HOME`.
   - Verificação da instalação do Java com o comando `java -version`.

2. **Criação do Projeto**
   - Criação de um novo projeto Java utilizando uma IDE (IntelliJ IDEA, Eclipse, etc.).
   - Configuração do arquivo `pom.xml` com as dependências necessárias, incluindo Spring Boot, Spring Data JPA, e PostgreSQL Driver.

3. **Consumo da API**
   - Implementação da classe `GutendexService` para realizar solicitações HTTP à API de livros (Gutendex).
   - Processamento da resposta JSON da API para extrair e modelar informações de livros e autores.

4. **Persistência de Dados**
   - Utilização do Spring Data JPA com Hibernate para simplificar o acesso e a manipulação de dados no banco de dados PostgreSQL.
   - Definição de entidades (`Livro` e `Autor`) com anotações de mapeamento para facilitar a persistência e recuperação de objetos.

5. **Interação com o Usuário via Console**
   - Desenvolvimento da classe `LiteraluraApplication` como o ponto de entrada do programa.
   - Implementação de um menu interativo no console que permite aos usuários realizar operações como buscar livros por autor ou título, listar livros registrados, listar autores registrados, listar livros por idioma, e listar autores vivos em um determinado ano.

6. **Formatação e Visualização de Dados**
   - Utilização de formatação ANSI para estilizar a saída no console, com títulos de livros em amarelo (`ANSI_YELLOW`) e nomes de autores em azul (`ANSI_BLUE`).
   - Organização clara e legível da apresentação de informações de livros e autores para uma melhor experiência do usuário.

## Classes e Métodos

### LiteraluraApplication

- **Descrição**: Ponto de entrada da aplicação que implementa a interface `CommandLineRunner` do Spring Boot para execução de operações no início da aplicação.
- **Métodos Principais**:
  - `run(String... args)`: Controla o fluxo principal da aplicação, exibindo um menu interativo no console e chamando métodos específicos com base na escolha do usuário.
  - Métodos privados como `buscarLivrosPorTermo`, `listarLivrosRegistrados`, `listarAutoresRegistrados`, `listarLivrosPorIdioma`, `listarAutoresVivosNoAno`: Cada um desses métodos corresponde a uma opção do menu e realiza operações como busca por termo, listagem de livros por idioma, etc.

### GutendexService

- **Descrição**: Classe responsável por interagir com a API Gutendex para obter dados sobre livros.
- **Métodos Principais**:
  - `fetchLivrosFromGutendex(String termo)`: Realiza uma requisição GET para a API Gutendex com o termo de busca especificado e retorna uma lista de objetos `Livro`.
  - Métodos auxiliares para construir a URL da API, fazer a requisição HTTP e processar a resposta JSON.

### Repositórios (LivroRepository e AutorRepository)

- **Descrição**: Interfaces que estendem `JpaRepository` do Spring Data JPA para operações de persistência de dados relacionados a livros e autores.
- **Métodos**: Herdam métodos básicos como `save`, `findById`, `findAll`, e também métodos personalizados como `findByIdioma` para buscar livros por idioma e `findAutoresVivosNoAno` para buscar autores que estavam vivos em um ano específico.

## Funcionalidades Futuras

- Ajustar testes automatizados para garantir a robustez do sistema.
- Melhorar o versionamento e estrutura do código para facilitar a manutenção e colaboração futura.

## Conclusão

Cada classe e método implementado no projeto LiterAlura desempenha um papel crucial na realização das funcionalidades principais, desde a interação com o usuário até a integração com APIs externas e persistência de dados. A arquitetura baseada em Spring Boot e Spring Data JPA facilita o desenvolvimento e a manutenção de um sistema robusto e eficiente.

Este conjunto de classes e métodos forma a espinha dorsal do projeto LiterAlura, proporcionando uma experiência interativa e funcional para os usuários interessados em explorar e descobrir novos livros e autores.
